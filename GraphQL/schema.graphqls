# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Activity {
  createdAt: Date!

  """ID"""
  id: ID!
  question: Question!
  questionId: String!
  user: User!

  """アクティビティの対象"""
  userId: String!
}

type ActivityConnection {
  edges: [ActivityEdge!]!
  pageInfo: PageInfo!
}

type ActivityEdge {
  cursor: String!
  node: Activity!
}

input ApproveFriendRequestInput {
  """リクエストを承認するID"""
  id: String!
}

type Choice {
  """表示する名前"""
  text: String!

  """その選択肢に対応するユーザID"""
  userId: ID!
}

type ChoiceGroup {
  """選択肢の一覧"""
  choices: [Choice!]!

  """改ざん検知用のハッシュ"""
  signature: Signature!
}

input ChoiceGroupInput {
  choices: [ChoiceInput!]!
  signature: SignatureInput!
}

input ChoiceInput {
  """表示する名前"""
  text: String!

  """その選択肢に対応するユーザID"""
  userId: ID!
}

input ContactInput {
  """ニックネームもしくはフルネーム、表示用の名前"""
  name: String!

  """電話番号"""
  phoneNumber: PhoneNumberInput!
}

input CreateFirebaseRegistrationTokenInput {
  """registration token"""
  token: String!
}

input CreateFriendRequestInput {
  """友達にしたいユーザーのID"""
  toUserId: String!
}

input CreateUserBlockInput {
  """ブロックしたいユーザーのID"""
  blockedUserId: String!
}

input CreateUserHideInput {
  """非表示にしたいユーザーのID"""
  hiddenUserId: String!
}

input CreateUserInput {
  """Phone Number"""
  phoneNumber: PhoneNumberInput!
}

input CreateVoteInput {
  """実際に投票するときに使った選択肢"""
  choiceGroup: ChoiceGroupInput!
  pollQuestionId: String!

  """投票された人のID"""
  votedUserId: String!
}

"""Date custom scalar type"""
scalar Date

type FirebaseRegistrationToken {
  """firebase registration token id"""
  id: ID!

  """firebase registration token"""
  token: String!
}

type Friend {
  createdAt: Date!
  friendUserId: String!
  id: ID!

  """フレンド状態"""
  status: FriendStatus!
  updatedAt: Date!
  userId: String!
}

type FriendConnection {
  edges: [FriendEdge!]!
  pageInfo: PageInfo!
}

type FriendEdge {
  cursor: String!
  node: Friend!
}

enum FriendStatus {
  APPROVED
  CANCELED
  REQUESTED
  UNSPECIFIED
}

enum Gender {
  FEMALE
  MALE
  OTHER
}

type InboxActivity {
  createdAt: Date!

  """ID"""
  id: ID!

  """イニシャル"""
  initial: String!

  """既読かどうか"""
  isRead: Boolean!
  question: Question!
  questionId: String!

  """アクティビティの対象"""
  userId: String!
}

type InboxActivityConnection {
  edges: [InboxActivityEdge!]!
  pageInfo: PageInfo!
}

type InboxActivityEdge {
  cursor: String!
  node: InboxActivity!
}

enum ItemType {
  GET_YOUR_NAME_ON_RANDOM_POLL
  PUT_YOUR_NAME_IN_YOUR_CRUSHS_POLL
  UNSPECIFIED
}

type LocalizableString {
  """日本語"""
  ja: String!
}

type Mutation {
  """フレンドリクエスト承認"""
  approveFriendRequest(input: ApproveFriendRequestInput!): Friend!

  """連絡先を保存する"""
  createContacts(
    """連絡先一覧。長さは500までにクライアント側で分割してから送る"""
    contacts: [ContactInput!]!
  ): Boolean!

  """FirebaseのRegistrationTokenを作成する"""
  createFirebaseRegistrationToken(input: CreateFirebaseRegistrationTokenInput!): FirebaseRegistrationToken!

  """フレンドリクエスト送信"""
  createFriendRequest(input: CreateFriendRequestInput!): Friend!

  """ユーザー作成"""
  createUser(input: CreateUserInput!): User!

  """ブロックする"""
  createUserBlock(input: CreateUserBlockInput!): UserBlock

  """非表示にする"""
  createUserHide(input: CreateUserHideInput!): UserHide!

  """投票する"""
  createVote(input: CreateVoteInput!): Vote!
  purchase(input: PurchaseInput!): Boolean!

  """Activityを既読にする"""
  readActivity(activityId: String!): Boolean!

  """ブロックをリセットする"""
  resetUserBlock: Boolean!

  """非表示をリセットする"""
  resetUserHide: Boolean!
  revealFullName(input: RevealFullNameInput!): String!
  revealFullNameByPurchase(input: RevealFullNameInput!): String!

  """ユーザープロフィールのアップデート"""
  updateUserProfile(input: UpdateUserProfileInput!): User!

  """Usernameのアップデート"""
  updateUsername(input: UpdateUsernameInput!): User!
}

type PageInfo {
  """最後のedgeのカーソル"""
  endCursor: String

  """次のページがあるかどうか"""
  hasNextPage: Boolean!

  """最初のedgeのカーソル"""
  startCursor: String
}

input PhoneNumberInput {
  """国別コード"""
  countryCode: String!

  """番号"""
  numbers: String!
}

type Poll {
  id: ID!

  """12の質問"""
  pollQuestions: [PollQuestion!]!
}

type PollQuestion {
  """選択肢"""
  choiceGroups: [ChoiceGroup!]!

  """ID"""
  id: ID!
  question: Question!

  """質問ID"""
  questionId: String!
}

input PurchaseInput {
  """価格"""
  coinAmount: Int!

  """Store Item ID. item IDじゃないので注意"""
  storeItemId: String!

  """対象ユーザ"""
  targetUserId: String
}

type Query {
  """ログイン中ユーザーを取得"""
  currentUser: User!

  """フレンドリクエスト一覧"""
  friendRequests(after: String, first: Int!): FriendConnection!

  """フレンドの一覧"""
  friends(after: String, first: Int!): UserConnection!

  """フレンドのフレンド一覧"""
  friendsOfFriends(after: String, first: Int!): UserConnection!

  """フレンドのActivityを一覧で取得する"""
  listActivities(after: String, first: Int!): ActivityConnection!

  """自分に対するActivityを一覧で取得する"""
  listInboxActivities(after: String, first: Int!): InboxActivityConnection!

  """持っているアイテム一覧"""
  listUserItems(after: String, first: Int!): UserItemConnection!

  """Pollを取得"""
  poll: Poll!

  """スクール一覧"""
  schools(after: String, first: Int!): SchoolConnection!

  """ストアのすべての商品を取得する"""
  store: Store!

  """投票数が多い順に質問を最大5個まで取得する"""
  topFlames(first: Float!, username: String!): [Question!]!

  """ユーザーを取得"""
  user(where: UserWhere!): User!

  """指定した学校に所属しているユーザー一覧"""
  usersBySchoolId(after: String, first: Int!, schoolId: String!): UserConnection!

  """ユーザー名で指定したユーザーが投票された質問を最大5個まで降順で取得する"""
  votedQuestions(
    """ユーザー名"""
    username: String!
  ): VotedQuestions!
}

type Question {
  id: ID!

  """imageFileName"""
  imageFileName: String!

  """text"""
  text: LocalizableString!
}

input RevealFullNameInput {
  activityId: String!
}

type School {
  id: ID!

  """学校名"""
  name: String!

  """学校名（略称）"""
  shortName: String!

  """スクールに所属しているユーザー数"""
  usersCount: Int!
}

type SchoolConnection {
  edges: [SchoolEdge!]!
  pageInfo: PageInfo!
}

type SchoolEdge {
  cursor: String!
  node: School!
}

type Signature {
  digest: String!
}

input SignatureInput {
  digest: String!
}

type Store {
  """商品一覧"""
  items: [StoreItem!]!
}

type StoreItem {
  """価格(コイン)"""
  coinAmount: Int!

  """説明"""
  description: LocalizableString
  id: ID!

  """アイテムの種類"""
  itemType: ItemType!

  """数"""
  quantity: Int!

  """ステータス"""
  status: StoreItemStatus!

  """タイトル"""
  title: LocalizableString!
}

enum StoreItemStatus {
  PUBLIC
  UNSPECIFIED
}

input UpdateUserProfileInput {
  """名前。nullの場合は更新しない"""
  firstName: String

  """性別。nullの場合は更新しない"""
  gender: Gender

  """学年。nullの場合は更新しない"""
  generation: Int

  """苗字。nullの場合は更新しない"""
  lastName: String

  """学校。nullの場合は更新しない"""
  schoolId: String
}

input UpdateUsernameInput {
  username: String!
}

type User {
  """表示名"""
  displayName: LocalizableString!

  """firebase uid"""
  firebaseUid: String!

  """first name"""
  firstName: String!

  """フレンド数"""
  friendsCount: Int

  """gender"""
  gender: Gender!

  """年代"""
  generation: Int

  """user id"""
  id: ID!

  """last name"""
  lastName: String!

  """共通のフレンド数"""
  mutualFriendsCount: Int

  """所属している学校"""
  school: School
  schoolId: String

  """username"""
  username: String

  """wallet"""
  wallet: Wallet
}

type UserBlock {
  blockedUserId: String!
  id: ID!
  userId: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

type UserHide {
  hiddenUserId: String!
  id: ID!
  userId: String!
}

type UserItem {
  createdAt: Date!
  id: String!

  """アイテムの種類"""
  itemType: ItemType!
  updatedAt: Date!
}

type UserItemConnection {
  edges: [UserItemEdge!]!
  pageInfo: PageInfo!
}

type UserItemEdge {
  cursor: String!
  node: UserItem!
}

input UserWhere {
  id: ID
  username: String
}

type Vote {
  createdAt: Date!
  id: ID!
  question: Question!
  questionId: String!

  """投票された人"""
  votedUser: User!

  """投票された人"""
  votedUserId: String!
}

type VotedQuestions {
  """投票数が降順の質問最大5個"""
  questions(
    """取得したい個数、範囲: 1 ~ 5"""
    first: Int!
  ): [Question!]!

  """ユーザーが投票された総数"""
  totalCount: Int!

  """投票されたユーザー名"""
  votedUsername: String!
}

type Wallet {
  """コイン枚数"""
  coinBalance: Int!
  id: ID!
}